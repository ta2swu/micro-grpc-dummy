// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bidirectionaldummy.proto

package bidirectionaldummy

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DummyStream service

type DummyStreamService interface {
	Stream(ctx context.Context, opts ...client.CallOption) (DummyStream_StreamService, error)
}

type dummyStreamService struct {
	c    client.Client
	name string
}

func NewDummyStreamService(name string, c client.Client) DummyStreamService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dummystream"
	}
	return &dummyStreamService{
		c:    c,
		name: name,
	}
}

func (c *dummyStreamService) Stream(ctx context.Context, opts ...client.CallOption) (DummyStream_StreamService, error) {
	req := c.c.NewRequest(c.name, "DummyStream.Stream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &dummyStreamServiceStream{stream}, nil
}

type DummyStream_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Request) error
	Recv() (*Response, error)
}

type dummyStreamServiceStream struct {
	stream client.Stream
}

func (x *dummyStreamServiceStream) Close() error {
	return x.stream.Close()
}

func (x *dummyStreamServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dummyStreamServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dummyStreamServiceStream) Send(m *Request) error {
	return x.stream.Send(m)
}

func (x *dummyStreamServiceStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DummyStream service

type DummyStreamHandler interface {
	Stream(context.Context, DummyStream_StreamStream) error
}

func RegisterDummyStreamHandler(s server.Server, hdlr DummyStreamHandler, opts ...server.HandlerOption) error {
	type dummyStream interface {
		Stream(ctx context.Context, stream server.Stream) error
	}
	type DummyStream struct {
		dummyStream
	}
	h := &dummyStreamHandler{hdlr}
	return s.Handle(s.NewHandler(&DummyStream{h}, opts...))
}

type dummyStreamHandler struct {
	DummyStreamHandler
}

func (h *dummyStreamHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.DummyStreamHandler.Stream(ctx, &dummyStreamStreamStream{stream})
}

type DummyStream_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
	Recv() (*Request, error)
}

type dummyStreamStreamStream struct {
	stream server.Stream
}

func (x *dummyStreamStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dummyStreamStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dummyStreamStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dummyStreamStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (x *dummyStreamStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
